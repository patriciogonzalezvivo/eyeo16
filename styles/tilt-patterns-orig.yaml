# Author @patriciogv - 2015

cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels
lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .3
    light2:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .3
styles:
    geometry-matrices:
        defines:
            PI: 3.14159265358979323846
        shaders:
            blocks:
                global: |
                    // Rotate in 2, 3 and 4 dimensions
                    // ================================
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat4 rotateX4D (float phi) {
                        return mat4(
                            vec4(1.,0.,0.,0),
                            vec4(0.,cos(phi),-sin(phi),0.),
                            vec4(0.,sin(phi),cos(phi),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat4 rotateY4D (float theta) {
                        return mat4(
                            vec4(cos(theta),0.,-sin(theta),0),
                            vec4(0.,1.,0.,0.),
                            vec4(sin(theta),0.,cos(theta),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                    mat4 rotateZ4D (float psi) {
                        return mat4(
                            vec4(cos(psi),-sin(psi),0.,0),
                            vec4(sin(psi),cos(psi),0.,0.),
                            vec4(0.,0.,1.,0.),
                            vec4(0.,0.,0.,1.));
                    }
                    //
                    // Scale 4 dimensions
                    // ================================
                    mat4 scale4D (float x, float y, float z) {
                        return mat4(
                            vec4(x,   0.0, 0.0, 0.0),
                            vec4(0.0, y,   0.0, 0.0),
                            vec4(0.0, 0.0, z,   0.0),
                            vec4(0.0, 0.0, 0.0, 1.0)
                        );
                    }
                    //
                    // Translate in 4 dimensions
                    mat4 translate4D (float x, float y, float z) {
                        return mat4(
                            vec4(1.0, 0.0, 0.0, 0.0),
                            vec4(0.0, 1.0, 0.0, 0.0),
                            vec4(0.0, 0.0, 1.0, 0.0),
                            vec4(x,   y,   z,   1.0)
                        );
                    }
    geometry-tilt:
        mix: geometry-matrices
        animated: true
        shaders:
            blocks:
                position: |
                    float t = u_time*0.1; 
                    position.xyz = rotateX3D(abs(cos(t*.5))) * rotateZ3D(sin(t)) * position.xyz;
    geometry-normal:
        shaders:
            blocks:
                global: |
                    // Ask to the geometry normals if this surface is a Wall
                    bool isWall() {
                        return dot(v_normal,vec3(0.,0.,1.)) == 0.0;
                    }
                    //
                    // Ask to the geometry normals if this surface is a roof
                    bool isRoof() {
                        return dot(v_normal,vec3(0.,0.,1.)) == 0.0;
                    }
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    patterns:
        mix: space-tile
        material:
            ambient: 1
            diffuse: 1
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // Random
                    //=============================
                    float random( in float _x){
                        return fract(sin(_x)*1e4);
                    }
                    // Color
                    //=============================
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }
                    // Space
                    //=============================
                    vec2 rotate2D(vec2 _st, float _angle){
                      _st -= 0.5;
                      _st =  mat2(cos(_angle),-sin(_angle),
                                  sin(_angle),cos(_angle)) * _st;
                      _st += 0.5;
                      return _st;
                    }
                    vec2 tile(vec2 _st, float _zoom){
                      _st *= _zoom;
                      return fract(_st);
                    }
                    vec2 brickTile(vec2 _st, float _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x += 0.5;
                        }
                        return fract(_st);
                    }
                    // Shapes
                    //=============================
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    float aastep(float threshold, float value) {
                      #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                        float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                        return smoothstep(threshold-afwidth, threshold+afwidth, value);
                      #else
                        return step(threshold, value);
                      #endif  
                    }
                    float circle(vec2 st, float radius){
                      vec2 pos = vec2(0.5)-st;
                      return 1.0-aastep(radius,dot(pos,pos)*3.14);
                    }
                    float stripes(vec2 st, float angle, float width){
                        st = rotate2D(st*20., angle);
                        return aastep(width,abs(sin(st.x*3.1415)));
                    }
                    #endif
    plain:
        base: polygons
        mix: [patterns, geometry-tilt]
        shaders:
            blocks:
                color: |
                    vec2 st = getTileCoords()*1.768;
                    float pattern = stripes(st,0.785375,.5);
                    color.rgb = mix(vec3(0.704), vec3(1.000,0.968,0.908), pattern);
    buildings:
        base: polygons
        mix: [patterns, geometry-tilt]
        texcoords: true
        shaders:
            blocks:
                position: |
                    // position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                color: |
                    vec2 st = vec2(v_texcoord.x,worldPosition().z*0.01);
                    float b = 0.1+random(getBrightness(color.rgb))*.9;
                    float pattern = 0.0;
                    if (b > 0.9){
                        if( dot(v_normal,vec3(0.,0.,1.)) >= 0.9 ){
                            st = fract(worldPosition().xy*0.1);
                        } else {
                            st = tile(st,3.);
                        }
                        pattern = circle(st,0.2);
                    } else if (b > 0.8){
                        if( dot(v_normal,vec3(0.,0.,1.)) >= 0.9 ){
                            st = fract(worldPosition().xy*0.05);
                            st = brickTile(st,2.);
                        } else {
                            st = brickTile(st,5.);
                        }
                        pattern = 1.0-circle(st,0.1);
                    } else {
                        if( dot(v_normal,vec3(0.,0.,1.)) >= 0.9 ){
                            st = v_texcoord.xy;
                        } else {
                            st *= 0.5;
                        }
                        float gradient = floor(b*10.)*0.1;
                        float angle = 3.1415 * gradient;
                        pattern = stripes(st,angle,gradient);
                    }
                    color.rgb = mix(vec3(0.204,0.204,0.204),vec3(1.000,0.968,0.908),pattern);
    buildings-lines:
        base: lines
        mix: [patterns, geometry-tilt]
        texcoords: true
        shaders:
            blocks:
                width: |
                    width *= 0.2+min(pow(position.z*0.006,2.),.6);
                position: |
                    // position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                color: |
                    vec2 st = v_texcoord.xy;
                    color.rgb = mix(vec3(0.204,0.204,0.204),vec3(1.000,0.968,0.908),smoothstep(0.4,0.5,st.x));
    tilt-lines:
        base: lines
        mix: geometry-tilt
    tilt-polygons:
        base: polygons
        mix: geometry-tilt
sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc

layers:
    earth:
        data: { source: osm }
        draw:
            plain:
                order: 1
                color: '#ddeeee'
            outline:
                order: 0
                style: tilt-lines
                color: [0.204,0.204,0.204]
                width: 2
    landuse:
        data: { source: osm }
        draw:
            plain:
                order: 1
                color: '#aaffaa'
            outline:
                order: 2
                style: tilt-lines
                color: [0.204,0.204,0.204]
                width: 2

    water:
        data: { source: osm }
        draw:
            tilt-polygons:
                order: 3
                color: '#343434'
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            tilt-lines:
                order: 5
                color: '#343434'
                width: 8
            outline:
                order: 4
                style: tilt-lines
                color: '#FDF5E6'
                width: 10
        highway:
            filter:
                kind: highway
            draw:
                tilt-lines:
                    color: '#343434'
                    width: 12
                outline:
                    color: '#FDF5E6'
                    width: 14
        tunnel:
            filter:
                is_tunnel: yes
            draw:
                tilt-lines:
                    color: '#343434'
            rail:
                filter:
                    kind: rail
                draw:
                    lines:
                        width: 0
        minor_road:
            filter:
                kind: minor_road
            draw:
                tilt-lines:
                    color: '#343434'
                    width: 5
                outline:
                    color: '#FDF5E6'
                    width: 6
        path:
            filter:
                kind: path
            draw:
                tilt-lines:
                    color: '#343434'
                    width: 3
                outline:
                    color: '#FDF5E6'
                    width: 4
        rail:
            filter:
                kind: rail
                is_tunnel: no
            draw:
                tilt-lines:
                    color: '#343434'
                    width: 3
                outline:
                    color: '#FDF5E6'
                    width: 4
    buildings:
        data: { source: osm }
        draw:
            buildings:
                order: 7
                color: Style.color.pseudoRandomColor
            outline:
                style: tilt-lines
                order: 3
                color: white
                width: [[15, 1px], [18, 20px]]
        extruded:
            filter: { $zoom: { min: 13 } }
            draw:
                buildings:
                    extrude: true
