# Patricio Gonzalez Vivo - 2015
# From Chapter about Noise at http://thebookofshaders.com/11/

import: random.yaml
styles:
    generative-noise:
        mix: generative-random
        shaders:
            blocks:
                global: |
                    // 1D Value Noise for 1, 2 and 3 dimentions
                    // ================================
                    float noise (in float x) {
                        float i = floor(x);
                        float f = fract(x);
                        float u = f * f * (3.0 - 2.0 * f);
                        return mix(random(i), random(i + 1.0), u);
                    }
                    
                    float noise (vec2 xy) {
                        vec2 i = floor(xy);
                        vec2 f = fract(xy);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }

                    float noise (vec3 xyz) {
                        const vec3 step = vec3(110.0, 241.0, 171.0);
                        vec3 i = floor(xyz);
                        vec3 f = fract(xyz);
                        float n = dot(i, step);
                        vec3 u = f * f * (3.0 - 2.0 * f);
                        return mix( mix(mix(random(n + dot(step, vec3(0,0,0))),
                                            random(n + dot(step, vec3(1,0,0))),
                                            u.x),
                                        mix(random(n + dot(step, vec3(0,1,0))),
                                            random(n + dot(step, vec3(1,1,0))),
                                            u.x),
                                        u.y),
                                    mix(mix(random(n + dot(step, vec3(0,0,1))),
                                        random(n + dot(step, vec3(1,0,1))),
                                        u.x),
                                        mix(random(n + dot(step, vec3(0,1,1))),
                                            random(n + dot(step, vec3(1,1,1))),
                                            u.x),
                                    u.y),
                                u.z);
                    }
                    //
                    // Simplex Noise
                    //
                    const float F3 =  0.3333333;
                    const float G3 =  0.1666667;
                    float snoise (vec3 p) {
                        vec3 s = floor(p + dot(p, vec3(F3)));
                        vec3 x = p - s + dot(s, vec3(G3));
                        vec3 e = step(vec3(0.0), x - x.yzx);
                        vec3 i1 = e*(1.0 - e.zxy);
                        vec3 i2 = 1.0 - e.zxy*(1.0 - e);
                        vec3 x1 = x - i1 + G3;
                        vec3 x2 = x - i2 + 2.0*G3;
                        vec3 x3 = x - 1.0 + 3.0*G3;
                        vec4 w, d;
                        w.x = dot(x, x);
                        w.y = dot(x1, x1);
                        w.z = dot(x2, x2);
                        w.w = dot(x3, x3);
                        w = max(0.6 - w, 0.0);
                        d.x = dot(random3(s), x);
                        d.y = dot(random3(s + i1), x1);
                        d.z = dot(random3(s + i2), x2);
                        d.w = dot(random3(s + 1.0), x3);
                        w *= w;
                        w *= w;
                        d *= w;
                        return dot(d, vec4(52.0));
                    }