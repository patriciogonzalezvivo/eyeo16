# author: Patricio Gonzalez Vivo (@patriciogv) - 2016 
# 
#   Trip from Buenos Aires to New York
#

import:
    - default.yaml
    - https://tangrams.github.io/blocks/geometry/projections.yaml
    - https://tangrams.github.io/blocks/points/shape.yaml

sources:
    places: 
        type: GeoJSON
        url: ../data/places.json
       
lights:
    dir:
        type: directional
        diffuse: .3
        ambient: .1
    point:
        type: point
        position: [0,0, 10px]
        diffuse: 5.
layers:
    bue-nyc:
        data: { source: places }
        draw:
            flight:
                color: [0.991, 0.786, 1.000]
                # width: [ [0, 4px], [20, 200]]
                width: 10px
                order: 1000
    places:
        data: { source: places }
        draw:
            points-shape:
                color: [0,0,0,0]
                size: 30px
            text:
                offset: [0,-20px]
                collide: false
                font:
                    transform: uppercase
                    typeface: Helvetica
                    size: 16px
                    fill: white
                    stroke: { color: black, width: 5 }

styles:
    plane:
        animated: true
        mix: [geometry-projections]
        shaders:
            blocks:
                color: |
                    vec2 A = vec2(-58.450925, -34.642733);
                    vec2 B = vec2(-73.96625, 40.78343);
                    float pct = fract(u_time*0.1);
                    vec2 plane_pos = mix(A,B,pct);
               
    flight:
        base: lines
        lighting: false
        blend: overlay
        animated: true
        texcoords: true
        mix: [plane]
        shaders:
            defines:
                DASH_SIZE: .3
                DASH_SCALE: 1.5
            blocks:
                color: |
                    vec2 pos = u_map_position.xy+v_position.xy;
                    vec2 latlon = vec2(x2lon_m(pos.x),y2lat_m(pos.y));
                    vec2 uv = (latlon-plane_pos)/vec2(180.,90.); 
                    
                    vec2 st = vec2(v_texcoord.x,dot(uv,uv)*2.);
                    float trail = smoothstep(0.95,1.,abs(sin(st.x*3.1415)))*step(0.,-uv.y);
                    float spark = step(0.5,abs(sin(st.x*3.1415)))-step(.00005,st.y);
                    float dash = step(DASH_SIZE,fract(v_texcoord.y*DASH_SCALE));
                    color.rgb = mix(color.rgb,vec3(1.),spark);
                    color.a *= max(spark,min(trail,dash));               
    points-shape:
        shaders:
            defines:
                SHAPE_SIDES: 3
                SHAPE_SIZE: 1.
                SHAPE_BORDER_WIDTH: 0.2
                SHAPE_BORDER_COLOR: vec3(1.)
    
    earth:
        base: polygons
        mix: [elevation-ramp, plane]
        shaders:
            blocks:
                color: |
                    point.position.xy -= u_map_position.xy;
                    point.position.xy += vec2(lon2x_m(plane_pos.x),lat2y_m(plane_pos.y));
    
    lines-dash:
        mix: plane
        shaders:
            defines:
                DASH_SIZE: .5
                DASH_SCALE: .3
            blocks:
                color: |
                    point.position.xy -= u_map_position.xy;
                    point.position.xy += vec2(lon2x_m(plane_pos.x),lat2y_m(plane_pos.y));
    water:
        mix: [filter-grid, plane]
        lighting: fragment
        shaders:
            defines:
                GRID_AMOUNT: .4
            blocks:
                color: |
                    point.position.xy -= u_map_position.xy;
                    point.position.xy += vec2(lon2x_m(plane_pos.x),lat2y_m(plane_pos.y));
                    
                    