# author: Patricio Gonzalez Vivo (@patriciogv) - 2016 
# 
#   Collaborators of The Book of shaders by may 2016
#

import:
    - blocks/global.yaml
    - blocks/patterns/grid.yaml
    - blocks/lines/dash.yaml
    - blocks/points/cross.yaml
    - blocks/points/shape.yaml
    - blocks/elevation/stripes.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-Nhm6Mkg
        rasters: [normals-elevation]
    normals-elevation:
        type: Raster
        url: https://s3.amazonaws.com/elevation-tiles-prod/normal/{z}/{x}/{y}.png
        max_zoom: 15
    collab: 
        type: GeoJSON
        url: https://patriciogonzalezvivo.github.io/eyeo16/data/collaborators.json

textures:
    collab:
        url: https://patriciogonzalezvivo.github.io/eyeo16/data/collaborators.png
scene:
    background:
        color: white

cameras:
    perspective:
        type: flat
        
layers:
    water:
        data: { source: osm }
        draw:
            water:
                order: global.order
                color: white
    earth:
        data: { source: osm }
        draw:
            earth:
                order: global.order-buttom
                color: white
            stripes:
                order: global.order
                color: white
            lines:
                order: global.order-top
                color: white
                width: 3px
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: global.order
                color: [0.982, 0.730, 0.988]
                width: [[7,0.0px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                roads:
                    order: global.order
                    width: [[8,0px], [8,.25px], [11, 1.5px], [14, 2px], [16, 4px], [17, 10m]]
                    color: [0.877, 0.474, 0.878]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    roads:
                        color: [0.990, 0.636, 1.000]
                        width: [[8,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
        tunnel:
            filter: {is_tunnel: yes }
            draw:
                roads:
                    color: [0.371, 0.175, 0.385]
                    order: global.order
    boundaries:
        data: { source: osm }
        draw:
            lines-dash:
                order: global.order
                color: [0.512, 0.803, 1.000]
                width: 1px

    collaborators:
        data: { source: collab }
        draw:
            avatars:
                size: [[0,30px], [6,100px], [10,130px]]
                collide: false
                color: |
                    function() {
                        return [ feature.col/255 , feature.row/255, 0 ]; 
                    }
        label:
            filter: { $zoom: { min: 6 } }
            draw:
                text:
                    collide: false
                    offset: [0, -100px]
                    font:
                        transform: uppercase
                        typeface: Helvetica
                        fill: black
                        size: 12px
                        stroke: { color: white, width: 6 }
styles:
    water:
        base: polygons
        mix: [patterns-grid]
        lighting: false
        shaders:
            blocks:
                color: |
                    color.rgb -= tileGrid()*0.416;
    earth:
        base: polygons
        raster: custom
        shaders:
            blocks:
                color: |
                    color.rgb *= ((1.-sampleRaster(0).a));
                    
    stripes:
        base: polygons
        mix: [elevation-stripes]
        shaders:
            defines:
                STRIPES_IN: 1.
                STRIPES_OUT: 1.
                STRIPES_MAX_ZOOM: 20.
                    
    roads:
        base: lines
        lighting: false
    lines-dash:
        shaders:
            defines:
                DASH_SIZE: .5
                DASH_SCALE: .3
    avatars:
        base: points
        mix: [functions-aastep]
        texcoords: true
        animated: true
        shaders:
            defines:
                COLS: 8
                ROWS: 5
                TWO_PI: 6.2831853071795864769252867665590
                HALF_PI: 1.57079632679
                TILT_IN: 7.
                TILT_OUT: 11.
                TILT_MAX_ZOOM: 13.
            uniforms:
                u_sprite: collab
            blocks:
                global: |
                    vec2 getOffset (vec3 color) {
                        vec2 st = v_texcoord.xy;
                        vec2 uv = 1./vec2(COLS,ROWS);
                        uv.x *= color.r*255.;
                        uv.y *= ROWS-(color.g*255.)-1.;
                        return uv + st/vec2(COLS,ROWS);
                    }
                    
                    vec3 sphereNormals(in vec2 uv) {
                        uv = fract(uv)*2.0-1.0; 
                        vec3 ret;
                        ret.xy = sqrt(uv * uv) * sign(uv);
                        ret.z = sqrt(abs(1.0 - dot(ret.xy,ret.xy)));
                        ret = ret * 0.5 + 0.5;    
                        return mix(vec3(0.0), ret, smoothstep(1.0,0.98,dot(uv,uv)) );
                    }

                    float random (vec3 p) { return fract(sin(dot(p.xyz, vec3(70.9898,78.233,32.4355)))* 43758.5453123); }

                color: |
                    vec2 st = v_texcoord.xy;
                    
                    vec2 offset = 1./vec2(COLS,ROWS);
                    offset.x *= color.r*255.;
                    offset.y *= ROWS-(color.g*255.)-1.;
                    
                    vec2 i_pos = floor(offset*vec2(COLS,ROWS));
                    
                    float t = u_time*0.25;
                    float pct = mix(random(vec3(i_pos, floor(t))), 
                                    random(vec3(i_pos, floor(t+1.))),
                                    smoothstep(0., 1., fract(t)));
                    t += pct*TWO_PI;
              
                    st -= .5;
                    float df = dot(st,st);
                    st += .5;
                    
                    vec3 normal = sphereNormals(st);
                    vec3 dir = vec3(cos(t-HALF_PI),0.0,sin(t-HALF_PI));
                    
                    float z = clamp(smoothstep(TILT_IN/TILT_MAX_ZOOM, TILT_OUT/TILT_MAX_ZOOM, max(u_map_position.z/TILT_MAX_ZOOM,0.)*0.9), 0., 1.);
                    color = texture2D(u_sprite, offset+st/vec2(COLS,ROWS));
                    color.a = mix( aastep(.2,(dot(normal, dir)*.5)+.5 ), 1., z);
                    color.a *= 1.-aastep(0.192, df);
                    color = mix(color,
                                vec4(vec3(0.520,1.000,0.749),1.),
                                (aastep(0.2,df)-aastep(0.25,df)));
