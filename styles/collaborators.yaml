# author: Patricio Gonzalez Vivo (@patriciogv) - 2016 
# 
#   Collaborators of The Book of shaders by may 2016
#

import:
    - https://tangrams.github.io/blocks/global.yaml
    - https://tangrams.github.io/blocks/patterns/grid.yaml
    - https://tangrams.github.io/blocks/lines/dash.yaml
    - https://tangrams.github.io/blocks/points/cross.yaml
    - https://tangrams.github.io/blocks/elevation/stripes.yaml
    - https://tangrams.github.io/blocks/points/shape.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-Nhm6Mkg
        rasters: [normals-elevation]
    normals-elevation:
        type: Raster
        url: https://s3.amazonaws.com/elevation-tiles-prod/normal/{z}/{x}/{y}.png
        max_zoom: 15
    collab: 
        type: GeoJSON
        url: https://patriciogonzalezvivo.github.io/eyeo16/data/collaborators.json

textures:
    collab:
        url: https://patriciogonzalezvivo.github.io/eyeo16/data/collaborators.png
scene:
    background:
        color: white

cameras:
    perspective:
        type: flat
        
layers:
    water:
        data: { source: osm }
        draw:
            water:
                order: global.order
                color: white
    earth:
        data: { source: osm }
        draw:
            earth:
                order: global.order
                color: white
            lines:
                order: global.order-top
                color: black
                width: 2px
    landuse:
        data: { source: osm }
        draw:
            landuse:
                order: global.order
                color: [0.710, 0.835, 0.704]
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: global.order
                color: [0.988, 0.988, 0.988]
                width: [[7,0.0px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                roads:
                    order: global.order
                    width: [[8,0px], [8,.25px], [11, 1.5px], [14, 2px], [16, 4px], [17, 10m]]
                    color: [0.631, 0.812, 0.880]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    roads:
                        color: [0.822, 0.904, 0.995]
                        width: [[8,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
        tunnel:
            filter: {is_tunnel: yes }
            draw:
                roads:
                    color: [0.271, 0.321, 0.435]
                    order: global.order
    boundaries:
        data: { source: osm }
        draw:
            lines-dash:
                order: global.order
                color: white
                width: 1px

    collaborators:
        data: { source: collab }
        draw:
            avatars:
                size: [[0,30px], [6,100px], [10,130px]]
                collide: false
                color: |
                    function() {
                        return [ feature.col/255 , feature.row/255, 0 ]; 
                    }
        label:
            filter: { $zoom: { min: 6 } }
            draw:
                text:
                    collide: false
                    offset: [0, -100px]
                    font:
                        transform: uppercase
                        typeface: Helvetica
                        fill: black
                        size: 12px
                        stroke: { color: white, width: 6 }

styles:
    water:
        base: polygons
        mix: [patterns-grid]
        lighting: false
        shaders:
            blocks:
                color: |
                    color.rgb -= tileGrid()*.2;
    earth:
        base: polygons
        raster: custom
        shaders:
            blocks:
                blocks:
                normal: |
                    vec4 raster = sampleRaster(0);
                    normal = (raster.rgb-.5)*2.;
                color: |
                    color.rgb = vec3(.5+(1.-raster.a)*.5);        
    landuse:
        base: polygons
        mix: [elevation-stripes]
                    
    roads:
        base: lines
        lighting: false
    lines-dash:
        shaders:
            defines:
                DASH_SIZE: .5
                DASH_SCALE: .3
    avatars:
        base: points
        mix: [functions-aastep]
        texcoords: true
        animated: true
        shaders:
            defines:
                COLS: 8
                ROWS: 5
                TWO_PI: 6.2831853071795864769252867665590
            uniforms:
                u_sprite: collab
            blocks:
                global: |
                    vec2 getOffset (vec3 color) {
                        vec2 st = v_texcoord.xy;
                        vec2 uv = 1./vec2(COLS,ROWS);
                        uv.x *= color.r*255.;
                        uv.y *= ROWS-(color.g*255.)-1.;
                        return uv + st/vec2(COLS,ROWS);
                    }
                    
                    float random (vec3 p) { return fract(sin(dot(p.xyz, vec3(70.9898,78.233,32.4355)))* 43758.5453123); }

                color: |
                    vec2 st = v_texcoord.xy;
                    
                    vec2 offset = 1./vec2(COLS,ROWS);
                    offset.x *= color.r*255.;
                    offset.y *= ROWS-(color.g*255.)-1.;
                    
                    vec2 i_pos = floor(offset*vec2(COLS,ROWS));
                    vec2 f_pos = fract(offset+st/vec2(COLS,ROWS));
                    
                    float t = u_time*0.5;
                    float pct = mix(random(vec3(i_pos, floor(t))), 
                                    random(vec3(i_pos, floor(t+1.))),
                                    smoothstep(0., 1., fract(t)));
                                    
                    pct += clamp((u_map_position.z-6.)/20.,0.,1.);
                      
                    color = texture2D(u_sprite, f_pos);
                    color.a = step(0.5, abs(pct));
                    
                    st -= .5;
                    float df = dot(st,st);
                    color.a *= 1.-aastep(0.248,df);
                    color.rgb += aastep(0.224,df);
                    
                    
                    
                    
                    

